######
#TODO#
######

Identify highest significance dips in search:
##########

* debug:
(sci) luke@crispy:~/Dropbox/proj/cbp/src$ Traceback (most recent call last):
File "run_the_machine.py", line 146, in recov irp.whitenedplot_6row(lcd,
ap='sap', stage=stage, inj=inj) File
"/home/luke/Dropbox/proj/cbp/src/inj_recov_plots.py", line 549, in
whitenedplot_6row f.savefig(savedir+plotname, dpi=300) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/figure.py",
line 1565, in savefig self.canvas.print_figure(*args, **kwargs) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_qt5agg.py",
line 196, in print_figure FigureCanvasAgg.print_figure(self, *args, **kwargs)
File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backend_bases.py",
line 2232, in print_figure **kwargs) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py",
line 527, in print_png FigureCanvasAgg.draw(self) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py",
line 474, in draw self.figure.draw(self.renderer) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py",
line 61, in draw_wrapper draw(artist, renderer, *args, **kwargs) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/figure.py",
line 1159, in draw func(*args) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py",
line 61, in draw_wrapper draw(artist, renderer, *args, **kwargs) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/axes/_base.py",
line 2324, in draw a.draw(renderer) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py",
line 61, in draw_wrapper draw(artist, renderer, *args, **kwargs) File
"/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/text.py",
line 757, in draw raise ValueError("posx and posy should be finite values")
ValueError: posx and posy should be finite values

During handling of the above exception, another exception occurred:

Traceback (most recent call last): File "run_the_machine.py", line 404, in
<module> nwhiten_max=10, nwhiten_min=1, rms_floor=5e-4) File
"run_the_machine.py", line 149, in recov str(keplerid))) NameError: name
'keplerid' is not defined


* check why output depths are still negative (even post-correction... this is
likely something in the postprocessing? (else it's that I actually do need to
redo all my injection/recovery runs)

* Make sure injrecov works with the recov-only update

* write an analog of this that summarizes result from realsearch. (in
run_the_machine) irra.summarize_injrecov_result()

* make easiest speed improvements (e.g., profile with python -m cProfiler)
(currently, runs ~5 per hour. That gives 12.5 days to do the full 1500 LC
dataset. It gives >1 month to run the injection recovery sims, which is
untenable.).

* move to adroit for full injrecov simulations, and full search.

* production run on actual KEBC stars, now that completeness is high enough.
->  _look through_ the ~1.5k search results, sorted per the above.


* how big & how fine of an injection grid do we need/want to answer the
_statistical_ questions (on occurrence rates) --> see
../../peerless/peerless/occurrence.py for an example of the actual calculation
that's required

* Um. The Jenkins matched-filter approach is VERY DIFFERENT on the surface from
e.g., BLS. Are they equivalent? Which is better?

* why does that one KOI show up as a δ scuti? (was this a failure in the KEBC
pipeline?). How many of these instances are there?

* read WASP 33 Van Esse+ COROT paper. δ scuti w/ a transiting planet.  >
spatially-resolved light from transiting planet. Can you get e.g., obliquity of
star? (if you understand the pulsation dirns, you get a preferred dirn). Can u
understand the pulsations better by getting spatially- resolved light?

* look at DFM's new O(N) GP models. Can they be used for *discovery*, as is the
idea here?

* bugfix:

Traceback (most recent call last):
  File "run_inj_recov.py", line 513, in <module>
    injrecov_test1(101, stage='dipsearch', inj=True, ds=True, whitened=True)
  File "run_inj_recov.py", line 480, in injrecov_test1
    irp.whitenedplot_6row(lcd, ap='sap', stage=stage, inj=inj)
  File "/home/luke/Dropbox/proj/cbp/src/inj_recov_plots.py", line 631, in whitenedplot_6row
    f.savefig(savedir+plotname, dpi=300)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/figure.py", line 1565, in savefig
    self.canvas.print_figure(*args, **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_qt5agg.py", line 196, in print_figure
    FigureCanvasAgg.print_figure(self, *args, **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backend_bases.py", line 2232, in print_figure
    **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py", line 527, in print_png
    FigureCanvasAgg.draw(self)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py", line 474, in draw
    self.figure.draw(self.renderer)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py", line 61, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/figure.py", line 1159, in draw
    func(*args)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py", line 61, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/axes/_base.py", line 2324, in draw
    a.draw(renderer)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/artist.py", line 61, in draw_wrapper
    draw(artist, renderer, *args, **kwargs)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/matplotlib/text.py", line 757, in draw
    raise ValueError("posx and posy should be finite values")
ValueError: posx and posy should be finite values

[1]+  Exit 1                  python run_inj_recov.py > LOGS/completeness_test_170320_2.txt

* bugfix:
(sci) luke@crispy:~/Dropbox/proj/cbp/src$ /home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/numpy/polynomial/legendre.py:1588: RankWarning: The fit may be poorly conditioned
  warnings.warn(msg, pu.RankWarning)
WARNING: File may have been truncated: actual file length (49152) is smaller than the expected size (440640) [astropy.io.fits.file]
Traceback (most recent call last):
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/utils/decorators.py", line 496, in __get__
    return obj.__dict__[self._key]
KeyError: 'data'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "run_inj_recov.py", line 522, in <module>
    injrecov_test1(102, stage='dipsearch', inj=True, ds=True, whitened=True)
  File "run_inj_recov.py", line 414, in injrecov_test1
    lcd, lcflag = ir.retrieve_random_lc()
  File "/home/luke/Dropbox/proj/cbp/src/inj_recov.py", line 426, in retrieve_random_lc
    rd = get_all_quarters_lc_data(kebc_kic_ids[ind])
  File "/home/luke/Dropbox/proj/cbp/src/inj_recov.py", line 482, in get_all_quarters_lc_data
    lcd = astrokep.read_kepler_fitslc(fits_path)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astrobase-0.1.0-py3.5.egg/astrobase/astrokep.py", line 226, in read_kepler_fitslc
    lchdr, lcdata = hdulist[1].header, hdulist[1].data
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/utils/decorators.py", line 498, in __get__
    val = self.fget(obj)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/io/fits/hdu/table.py", line 404, in data
    data = self._get_tbdata()
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/io/fits/hdu/table.py", line 171, in _get_tbdata
    self._data_offset)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/io/fits/hdu/base.py", line 568, in _get_raw_data
    return self._file.readarray(offset=offset, dtype=code, shape=shape)
  File "/home/luke/Dropbox/miniconda3/envs/sci/lib/python3.5/site-packages/astropy/io/fits/file.py", line 283, in readarray
    buffer=self._mmap)
TypeError: buffer is too small for requested array






##########
Possible improvements:

* which stars have known planet candidates already in our catalog (e.g., KIC
  11013201 has real dips, and is also KOI 972. Possible delta Scuti 
  oscillations, with the transiting planet. ?!?!. What does that mean about
  evolutionary state?)

* make ur interp1d calls smarter (if possible)

* avoid fitting out subharmonics of planet transits!!
Example cases: 8122124. See 8122124_qnum9_inum2_sap.png
Possibilities: 
- model comparison?
- smart condition on really only searching for harmonics & subharmonics 
  of EB signal (i.e. look over some frequency comb)
- nb. this really should only be an issue w/ the shortest-period injected 
  planets

* review doc/discussion from 170308. consider integrating QATS (if we want 
  long-period, ED rather than just EC and EA sensitivity)

* Understand how DFM+ peerless implemented model comparison once you have nice
    transits. Implement it.

* implement Armstrong+ 2014, Sec 3.1. Box with local polynomial detrending
  (add it in astrobase, then call in find_dips)

----------

* How to fit out spots: e.g., with `george` (GP regression)?

Longer-term ideas:
*Detrend+normalize:
    Match the KEBC detrending? As-is, I think I'm leaving in trends that are
    too big.
*Period finder:
    Assess for what fraction we need to revert to KEBC period.

astrokep.find_lightcurve_gaps

* add "s2n_on_grass" (Petigura et al 2013) to cull out "significant" transits
-> can do this in post-processing, or (likely better) add direct to
astrobase. See FIXME below.

 ALSO:
astrokep.stitch_lightcurve_gaps

astrokep.keplerflux_to_keplermag

ALSO:
 PyKE is also worth assessing: what detrending tricks does it use?
'''
